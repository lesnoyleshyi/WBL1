Чем отличаются RWMutex от Mutex?

//

Mutex - это структура с двумя полями:
type Mutex struct {
    state int32  - "статус" мьютекса (захвачен/свободен/голодает)
    sema  uint32 - используется в "режиме голодания"
}
RWMutex - структура, содержащая Mutex как одно из полей:
type RWMutex struct {
    w           Mutex  - блокируется, если есть ожидающие "писатели"
    writerSem   uint32 - семафор для писателей, чтобы они дождались завершения работы "читателями"
    readerSem   uint32 - семафор для читателей, чтобы они дождались завершения работы "писателями"
    readerCount int32  - количество ожидающих читателей
    readerWait  int32  - количество ожидающих писателей
}


RWMutex по сравнению с Mutex содержит больше методов:
    Mutex: Lock(), Unlock(), TryLock();
    RWMutex: Lock(), Unlock(), TryLock(), RLock(), RUnlock(), TryRLock().

Дополнительные методы с префиксом 'R' позволяют сократить количество блокировок
и за счёт этого повысить общую производительность программы.
При вызове RLock() одновременный доступ к критической секции (КС) доступен
для всех горутин, удерживающих данную блокировку.
В случае с Lock() доступ к КС разрешён только одной горутине. Следующая горутина
получит доступ к КС только после того, как предыдущая снимет блокировку.
Для операций чтения, не изменяющих данные, такая блокировка избыточна.

https://cs.opensource.google/go/go/+/refs/tags/go1.18.2:src/sync/mutex.go
https://cs.opensource.google/go/go/+/refs/tags/go1.18.2:src/sync/rwmutex.go

